#!/usr/bin/env python3
"""
Planfix MCP Server

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ Planfix —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º Model Context Protocol (MCP)
–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Claude –∏ –¥—Ä—É–≥–∏–º–∏ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏.

–ê–≤—Ç–æ—Ä: Your Name
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
from typing import Any, AsyncIterator, Dict, List, Optional

from mcp.server.fastmcp import Context, FastMCP

from .config import config
from .planfix_api import PlanfixError, api
from .utils import (
    format_analytics_report,
    format_date,
    format_error,
    format_task_list,
    validate_priority,
    validate_status,
)

# Configure logging
logging.basicConfig(level=logging.DEBUG if config.debug else logging.INFO)
logger = logging.getLogger(__name__)

# Lifespan context for server initialization
@asynccontextmanager
async def server_lifespan(server: FastMCP) -> AsyncIterator[Dict[str, Any]]:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Planfix MCP Server...")
    
    # Test API connection on startup
    try:
        connection_ok = await api.test_connection()
        if not connection_ok:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
            raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Planfix API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    # Provide context to handlers
    context = {
        "api": api,
        "start_time": datetime.now(),
        "version": "1.0.0"
    }
    
    try:
        yield context
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Planfix MCP Server...")

# –°–æ–∑–¥–∞—ë–º MCP —Å–µ—Ä–≤–µ—Ä —Å lifespan —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
mcp = FastMCP(
    name="Planfix Integration",
    lifespan=server_lifespan
)

# ============================================================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ (TOOLS) - –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å LLM
# ============================================================================

@mcp.tool()
async def create_task(
    name: str,
    description: str = "",
    project_id: Optional[int] = None,
    assignee_id: Optional[int] = None,
    priority: str = "NORMAL",
    deadline: Optional[str] = None,
    ctx: Context = None
) -> str:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Planfix.
    
    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        description: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∑–∞–¥–∞—á–∏
        assignee_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (LOW, NORMAL, HIGH, CRITICAL)
        deadline: –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        
    Example:
        create_task("–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ XYZ", priority="HIGH")
    """
    try:
        ctx.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {name}")
        
        # Validate priority
        priority = validate_priority(priority)
        
        # Create task via API
        task = await api.create_task(
            name=name,
            description=description,
            project_id=project_id,
            assignee_id=assignee_id,
            priority=priority,
            deadline=deadline
        )
        
        result = f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        result += f"üìã **ID:** {task.id}\n"
        result += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task.name}\n"
        result += f"‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {task.priority}\n"
        
        if task.deadline:
            result += f"‚è∞ **–°—Ä–æ–∫:** {format_date(task.deadline)}\n"
        
        if project_id:
            result += f"üéØ **–ü—Ä–æ–µ–∫—Ç:** ID {project_id}\n"
            
        if assignee_id:
            result += f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** ID {assignee_id}\n"
            
        ctx.info(f"–ó–∞–¥–∞—á–∞ {task.id} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return result
        
    except PlanfixError as e:
        error_msg = format_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        ctx.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        logger.error(f"Unexpected error creating task: {e}")
        return error_msg

@mcp.tool()
async def search_tasks(
    query: str = "",
    project_id: Optional[int] = None,
    assignee_id: Optional[int] = None,
    status: str = "active",
    limit: int = 20,
    ctx: Context = None
) -> str:
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –≤ Planfix.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
        project_id: –§–∏–ª—å—Ç—Ä –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
        assignee_id: –§–∏–ª—å—Ç—Ä –ø–æ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á (active, completed, all)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        
    Example:
        search_tasks("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", status="active")
    """
    try:
        ctx.info(f"–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á: query='{query}', status='{status}'")
        
        # Search tasks via API
        tasks = await api.search_tasks(
            query=query,
            project_id=project_id,
            assignee_id=assignee_id,
            status=status
        )
        
        # Limit results
        if limit and len(tasks) > limit:
            tasks = tasks[:limit]
        
        # Format and return results
        result = format_task_list(tasks)
        
        if len(tasks) >= limit:
            result += f"\n\nüí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {limit} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            
        ctx.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        return result
        
    except PlanfixError as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á")
        ctx.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á")
        logger.error(f"Unexpected error searching tasks: {e}")
        return error_msg

@mcp.tool()
async def update_task_status(
    task_id: int,
    status: str,
    comment: str = "",
    ctx: Context = None
) -> str:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (NEW, IN_WORK, COMPLETED, REJECTED, PAUSED)
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    Example:
        update_task_status(123, "COMPLETED", "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Å—Ä–æ–∫")
    """
    try:
        ctx.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {status}")
        
        # Validate status
        status = validate_status(status)
        
        # Update via API
        success = await api.update_task_status(task_id, status, comment)
        
        if success:
            result = f"‚úÖ **–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω!**\n\n"
            result += f"üìã **–ó–∞–¥–∞—á–∞ ID:** {task_id}\n"
            result += f"üîÑ **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** {status}\n"
            
            if comment:
                result += f"üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {comment}\n"
                
            ctx.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status}")
            return result
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}"
            
    except PlanfixError as e:
        error_msg = format_error(e, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
        ctx.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
        logger.error(f"Unexpected error updating task status: {e}")
        return error_msg

@mcp.tool()
async def add_task_comment(
    task_id: int,
    comment: str,
    ctx: Context = None
) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ.
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        comment: –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        
    Example:
        add_task_comment(123, "–û–±–Ω–æ–≤–∏–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
    """
    try:
        ctx.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ {task_id}")
        
        success = await api.add_task_comment(task_id, comment)
        
        if success:
            result = f"‚úÖ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            result += f"üìã **–ó–∞–¥–∞—á–∞ ID:** {task_id}\n"
            result += f"üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {comment[:100]}{'...' if len(comment) > 100 else ''}\n"
            
            ctx.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ {task_id}")
            return result
        else:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ {task_id}"
            
    except PlanfixError as e:
        error_msg = format_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        ctx.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        logger.error(f"Unexpected error adding comment: {e}")
        return error_msg

@mcp.tool()
async def create_project(
    name: str,
    description: str = "",
    owner_id: Optional[int] = None,
    client_id: Optional[int] = None,
    ctx: Context = None
) -> str:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Planfix.
    
    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        owner_id: ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        
    Example:
        create_project("–ù–æ–≤–∞—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è", "Q1 2024 –∫–∞–º–ø–∞–Ω–∏—è")
    """
    try:
        ctx.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {name}")
        
        # Create project via API
        project = await api.create_project(
            name=name,
            description=description,
            owner_id=owner_id,
            client_id=client_id
        )
        
        result = f"‚úÖ **–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
        result += f"üéØ **ID:** {project.id}\n"
        result += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {project.name}\n"
        
        if description:
            result += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description[:100]}{'...' if len(description) > 100 else ''}\n"
            
        if owner_id:
            result += f"üë§ **–í–ª–∞–¥–µ–ª–µ—Ü:** ID {owner_id}\n"
            
        if client_id:
            result += f"üè¢ **–ö–ª–∏–µ–Ω—Ç:** ID {client_id}\n"
            
        ctx.info(f"–ü—Ä–æ–µ–∫—Ç {project.id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
        
    except PlanfixError as e:
        error_msg = format_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        ctx.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        logger.error(f"Unexpected error creating project: {e}")
        return error_msg

@mcp.tool()
async def add_contact(
    name: str,
    email: str = "",
    phone: str = "",
    company: str = "",
    position: str = "",
    ctx: Context = None
) -> str:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ Planfix.
    
    Args:
        name: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        email: Email –∞–¥—Ä–µ—Å
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        company: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        position: –î–æ–ª–∂–Ω–æ—Å—Ç—å
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        
    Example:
        add_contact("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "ivan@company.com", "+7-999-123-45-67", "–û–û–û –ö–æ–º–ø–∞–Ω–∏—è", "–ú–µ–Ω–µ–¥–∂–µ—Ä")
    """
    try:
        ctx.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {name}")
        
        # Add contact via API
        contact = await api.add_contact(
            name=name,
            email=email,
            phone=phone,
            company=company,
            position=position
        )
        
        result = f"‚úÖ **–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
        result += f"üë§ **ID:** {contact.id}\n"
        result += f"üìù **–ò–º—è:** {contact.name}\n"
        
        if email:
            result += f"üìß **Email:** {email}\n"
        if phone:
            result += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
        if company:
            result += f"üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {company}\n"
        if position:
            result += f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {position}\n"
            
        ctx.info(f"–ö–æ–Ω—Ç–∞–∫—Ç {contact.id} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
        
    except PlanfixError as e:
        error_msg = format_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        ctx.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        logger.error(f"Unexpected error adding contact: {e}")
        return error_msg

@mcp.tool()
async def get_analytics_report(
    report_type: str,
    period_start: str,
    period_end: str,
    group_by: str = "user",
    ctx: Context = None
) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –∏–∑ Planfix.
    
    Args:
        report_type: –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (time, finance, tasks)
        period_start: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        period_end: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        group_by: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (user, project, task_type)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç
        
    Example:
        get_analytics_report("time", "2024-01-01", "2024-01-31", "user")
    """
    try:
        ctx.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞: {report_type} –∑–∞ {period_start} - {period_end}")
        
        # Get report via API
        report_data = await api.get_analytics_report(
            report_type=report_type,
            date_from=period_start,
            date_to=period_end,
            group_by=group_by
        )
        
        # Format report
        result = format_analytics_report(report_data)
        
        ctx.info(f"–û—Ç—á—ë—Ç {report_type} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return result
        
    except PlanfixError as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
        ctx.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞")
        logger.error(f"Unexpected error getting report: {e}")
        return error_msg

# ============================================================================
# –†–ï–°–£–†–°–´ (RESOURCES) - –î–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è LLM
# ============================================================================

@mcp.resource("dashboard://summary")
async def get_dashboard_summary() -> str:
    """–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–±–æ—á–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É Planfix."""
    try:
        # Get current data
        active_tasks = await api.search_tasks(status="active")
        projects = await api.get_projects()
        
        # Calculate stats
        active_count = len(active_tasks)
        overdue_count = sum(1 for task in active_tasks 
                          if task.deadline and task.deadline < datetime.now().strftime("%Y-%m-%d"))
        
        # Get completed tasks today (mock data for now)
        completed_today = 8  # This would be a real API call
        
        result = f"üìä **–°–≤–æ–¥–∫–∞ Planfix** –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        result += "üìã **–ó–ê–î–ê–ß–ò:**\n"
        result += f"   ‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}\n"
        result += f"   ‚îî‚îÄ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã: {overdue_count}\n"
        result += f"   ‚îî‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n\n"
        
        result += "üéØ **–ü–†–û–ï–ö–¢–´:**\n"
        result += f"   ‚îî‚îÄ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}\n"
        active_projects = [p for p in projects if p.status != "COMPLETED"]
        result += f"   ‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_projects)}\n\n"
        
        result += "üìà **–ê–ö–¢–ò–í–ù–û–°–¢–¨:**\n"
        result += f"   ‚îî‚îÄ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: 78%\n"  # Mock data
        result += f"   ‚îî‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting dashboard: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {format_error(e)}"

@mcp.resource("projects://list")
async def get_projects_list() -> str:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    try:
        projects = await api.get_projects()
        
        if not projects:
            return "üìÇ –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = f"üéØ **–ü—Ä–æ–µ–∫—Ç—ã** ({len(projects)} —à—Ç.)\n\n"
        
        for i, project in enumerate(projects, 1):
            result += f"{i}. **{project.name}** (#{project.id})\n"
            if project.status:
                result += f"   ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {project.status}\n"
            if project.owner:
                result += f"   ‚îî‚îÄ –í–ª–∞–¥–µ–ª–µ—Ü: {project.owner}\n"
            if project.task_count:
                result += f"   ‚îî‚îÄ –ó–∞–¥–∞—á: {project.task_count}\n"
            result += "\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error getting projects: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {format_error(e)}"

@mcp.resource("task://{task_id}")
async def get_task_details(task_id: str) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ."""
    try:
        task_id_int = int(task_id)
        task = await api.get_task(task_id_int)
        
        result = f"üìã **–ó–∞–¥–∞—á–∞ #{task.id}**\n\n"
        result += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task.name}\n"
        
        if task.description:
            result += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {task.description[:200]}{'...' if len(task.description) > 200 else ''}\n"
        
        if task.status:
            result += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {task.status}\n"
        
        if task.assignee:
            result += f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task.assignee}\n"
        
        if task.project:
            result += f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {task.project}\n"
        
        if task.priority:
            result += f"‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {task.priority}\n"
        
        if task.deadline:
            result += f"‚è∞ **–°—Ä–æ–∫:** {format_date(task.deadline)}\n"
        
        result += f"\nüïí **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return result
        
    except ValueError:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: {task_id}"
    except Exception as e:
        logger.error(f"Error getting task {task_id}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {format_error(e)}"

@mcp.resource("contacts://recent")
async def get_recent_contacts() -> str:
    """–°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    try:
        contacts = await api.get_contacts(limit=10)
        
        if not contacts:
            return "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = f"üë• **–ù–µ–¥–∞–≤–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã** ({len(contacts)} —à—Ç.)\n\n"
        
        for i, contact in enumerate(contacts, 1):
            result += f"{i}. **{contact.name}** (#{contact.id})\n"
            
            if contact.email:
                result += f"   ‚îî‚îÄ üìß {contact.email}\n"
            if contact.phone:
                result += f"   ‚îî‚îÄ üìû {contact.phone}\n"
            if contact.company:
                result += f"   ‚îî‚îÄ üè¢ {contact.company}\n"
            if contact.position:
                result += f"   ‚îî‚îÄ üíº {contact.position}\n"
            result += "\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error getting contacts: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {format_error(e)}"

# ============================================================================
# –ü–†–û–ú–ü–¢–´ (PROMPTS) - –®–∞–±–ª–æ–Ω—ã –¥–ª—è LLM
# ============================================================================

@mcp.prompt()
def analyze_project_status(project_name: str) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞."""
    return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "{project_name}" –≤ Planfix:

üîç **–ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê:**
1. –ü—Ä–æ–≤–µ—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å—Ä–æ–∫–∞–º
2. –û—Ü–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞  
3. –í—ã—è–≤–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
4. –û–ø—Ä–µ–¥–µ–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
5. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

üìä **–ú–ï–¢–†–ò–ö–ò –î–õ–Ø –û–¶–ï–ù–ö–ò:**
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å—Ä–æ–∫
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)

‚ö†Ô∏è **–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:**
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏

üìã **–†–ï–ó–£–õ–¨–¢–ê–¢:**
–ü–æ–¥–≥–æ—Ç–æ–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ —Å:
‚Ä¢ –¢–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""

@mcp.prompt()
def create_weekly_report(week_start: str) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    week_end = (datetime.strptime(week_start, "%Y-%m-%d") + timedelta(days=6)).strftime("%Y-%m-%d")
    
    return f"""–°–æ–∑–¥–∞–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {week_start} - {week_end}:

üìä **–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ï–î–ï–õ–ò:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤ —Å—Ä–æ–∫
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –û–±—â–µ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

üéØ **–î–û–°–¢–ò–ñ–ï–ù–ò–Ø:**
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã/—ç—Ç–∞–ø—ã
‚Ä¢ –†–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è

‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–´ –ò –†–ò–°–ö–ò:**
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏  
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ—Å—É—Ä—Å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

üìà **–¢–†–ï–ù–î–´ –ò –ê–ù–ê–õ–ò–ó:**
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ

üìã **–ü–õ–ê–ù–´ –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ:**
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã"""

@mcp.prompt()
def plan_sprint(sprint_duration: int = 14) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞."""
    return f"""–°–ø–ª–∞–Ω–∏—Ä—É–π —Å–ø—Ä–∏–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {sprint_duration} –¥–Ω–µ–π:

üéØ **–¶–ï–õ–ò –°–ü–†–ò–ù–¢–ê:**
1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø—Ä–∏–Ω—Ç–∞
2. –£—Å—Ç–∞–Ω–æ–≤–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
3. –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

üìã **–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ß:**
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–µ–∫–ª–æ–≥ –∑–∞–¥–∞—á
‚Ä¢ –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –£—á—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏

‚è∞ **–í–†–ï–ú–ï–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:**
‚Ä¢ –†–∞–∑–±–µ–π —Å–ø—Ä–∏–Ω—Ç –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ milestone'—ã
‚Ä¢ –û—Å—Ç–∞–≤—å –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –£—á—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –æ—Ç–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã

üîÑ **–ü–†–û–¶–ï–°–°–´ –ò –†–ò–¢–£–ê–õ–´:**
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–∏–Ω–∫–∏ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å-—Ä–µ–ø–æ—Ä—Ç–æ–≤

üìä **–ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ö–û–ù–¢–†–û–õ–¨:**
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ KPI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π –¥–∞—à–±–æ—Ä–¥—ã –∏ –æ—Ç—á—ë—Ç—ã
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å –ø–ª–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π

üéØ **–ò–¢–û–ì–û–í–´–ô –ü–õ–ê–ù:**
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å–ø—Ä–∏–Ω—Ç–∞ —Å:
- –°–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏
- –ì—Ä–∞—Ñ–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö milestone'–æ–≤
- –ü–ª–∞–Ω –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
- –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—Ö–∞ —Å–ø—Ä–∏–Ω—Ç–∞"""

# ============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ============================================================================

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Planfix MCP Server...")
        mcp.run()
    except KeyboardInterrupt:
        logger.info("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()