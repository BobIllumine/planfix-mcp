#!/usr/bin/env python3
"""
Planfix MCP Server

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ Planfix —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º Model Context Protocol (MCP)
–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Claude –∏ –¥—Ä—É–≥–∏–º–∏ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏.

–ê–≤—Ç–æ—Ä: Your Name
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
import sys
from typing import Any, AsyncIterator, Dict, List, Optional

from mcp.server.fastmcp import FastMCP

from .config import config
from .planfix_api import PlanfixAPI, PlanfixError
from .utils import (
    format_date,
    format_error,
    format_task_list,
)

# Configure logging
logging.basicConfig(level=logging.DEBUG if config.debug else logging.INFO)
logger = logging.getLogger(__name__)
api: Optional[PlanfixAPI] = None
# Lifespan context for server initialization
@asynccontextmanager
async def server_lifespan(server: FastMCP) -> AsyncIterator[Dict[str, Any]]:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Planfix MCP Server...")
    global api
    api = PlanfixAPI()
    # Test API connection on startup
    try:
        connection_ok = await api.test_connection()
        if not connection_ok:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
            raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Planfix API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    
    # Print available tools
    try:
        tools_response = await server.list_tools()
        tools = tools_response
        if tools and len(tools) > 0:
            logger.info(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã MCP ({len(tools)} —à—Ç.):")
            for tool in tools:
                tool_name = getattr(tool, 'name', 'unknown')
                logger.info(f"   ‚îî‚îÄ {tool_name}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    # Provide context to handlers
    context = {
        "api": api,
        "start_time": datetime.now(),
        "version": "1.0.0"
    }
    
    try:
        yield context
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Planfix MCP Server...")

# –°–æ–∑–¥–∞—ë–º MCP —Å–µ—Ä–≤–µ—Ä —Å lifespan —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
mcp = FastMCP(
    name="Planfix Integration",
    lifespan=server_lifespan
)

# ============================================================================
# –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ (TOOLS) - –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å LLM
# ============================================================================

# Removed create_task - read-only scope

@mcp.tool()
async def search_tasks(
    query: str = "",
    project_id: Optional[int] = None,
    assignee_id: Optional[int] = None,
    status: str = "active",
    limit: int = 20
) -> str:
    """–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –≤ Planfix.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
        project_id: –§–∏–ª—å—Ç—Ä –ø–æ ID –ø—Ä–æ–µ–∫—Ç–∞
        assignee_id: –§–∏–ª—å—Ç—Ä –ø–æ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á (active, completed, all)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        
    Example:
        search_tasks("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", status="active")
    """
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á: query='{query}', status='{status}'")
        
        # Search tasks via API
        if api is None:
            return "‚ùå API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        tasks = await api.search_tasks(
            query=query,
            project_id=project_id,
            assignee_id=assignee_id,
            status=status
        )
        
        # Limit results
        if limit and len(tasks) > limit:
            tasks = tasks[:limit]
        
        # Format and return results
        result = format_task_list(tasks)
        
        if len(tasks) >= limit:
            result += f"\n\nüí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {limit} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
            
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        return result
        
    except PlanfixError as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return error_msg
    except Exception as e:
        error_msg = format_error(e, "–ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á")
        logger.error(f"Unexpected error searching tasks: {e}")
        return error_msg

# Removed update_task_status, add_task_comment, create_project, add_contact, get_analytics_report - read-only scope

# ============================================================================
# –†–ï–°–£–†–°–´ (RESOURCES) - –î–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è LLM
# ============================================================================

@mcp.resource("dashboard://summary")
async def get_dashboard_summary() -> str:
    """–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–±–æ—á–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É Planfix."""
    try:
        if api is None:
            return "‚ùå API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        # Get current data
        active_tasks = await api.search_tasks(status="active")
        projects = await api.get_projects()
        
        # Calculate stats
        active_count = len(active_tasks)
        overdue_count = sum(1 for task in active_tasks 
                          if task.deadline and task.deadline < datetime.now().strftime("%Y-%m-%d"))
        
        # Get completed tasks today (mock data for now)
        completed_today = 8  # This would be a real API call
        
        result = f"üìä **–°–≤–æ–¥–∫–∞ Planfix** –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        result += "üìã **–ó–ê–î–ê–ß–ò:**\n"
        result += f"   ‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}\n"
        result += f"   ‚îî‚îÄ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã: {overdue_count}\n"
        result += f"   ‚îî‚îÄ –ó–∞–≤–µ—Ä—à–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {completed_today}\n\n"
        
        result += "üéØ **–ü–†–û–ï–ö–¢–´:**\n"
        result += f"   ‚îî‚îÄ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}\n"
        active_projects = [p for p in projects if p.status != "COMPLETED"]
        result += f"   ‚îî‚îÄ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_projects)}\n\n"
        
        result += "üìà **–ê–ö–¢–ò–í–ù–û–°–¢–¨:**\n"
        result += f"   ‚îî‚îÄ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: 78%\n"  # Mock data
        result += f"   ‚îî‚îÄ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}\n"
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting dashboard: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {format_error(e)}"

@mcp.resource("projects://list")
async def get_projects_list() -> str:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
    try:
        if api is None:
            return "‚ùå API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        projects = await api.get_projects()
        
        if not projects:
            return "üìÇ –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = f"üéØ **–ü—Ä–æ–µ–∫—Ç—ã** ({len(projects)} —à—Ç.)\n\n"
        
        for i, project in enumerate(projects, 1):
            result += f"{i}. **{project.name}** (#{project.id})\n"
            if project.status:
                result += f"   ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {project.status}\n"
            if project.owner:
                result += f"   ‚îî‚îÄ –í–ª–∞–¥–µ–ª–µ—Ü: {project.owner}\n"
            if project.task_count:
                result += f"   ‚îî‚îÄ –ó–∞–¥–∞—á: {project.task_count}\n"
            result += "\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error getting projects: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {format_error(e)}"

@mcp.resource("task://{task_id}")
async def get_task_details(task_id: str) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ."""
    try:
        if api is None:
            return "‚ùå API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        task_id_int = int(task_id)
        task = await api.get_task(task_id_int)
        
        result = f"üìã **–ó–∞–¥–∞—á–∞ #{task.id}**\n\n"
        result += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {task.name}\n"
        
        if task.description:
            result += f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {task.description[:200]}{'...' if len(task.description) > 200 else ''}\n"
        
        if task.status:
            result += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {task.status}\n"
        
        if task.assignee:
            result += f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {task.assignee}\n"
        
        if task.project:
            result += f"üéØ **–ü—Ä–æ–µ–∫—Ç:** {task.project}\n"
        
        if task.priority:
            result += f"‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {task.priority}\n"
        
        if task.deadline:
            result += f"‚è∞ **–°—Ä–æ–∫:** {format_date(task.deadline)}\n"
        
        result += f"\nüïí **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return result
        
    except ValueError:
        return f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏: {task_id}"
    except Exception as e:
        logger.error(f"Error getting task {task_id}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {format_error(e)}"

@mcp.resource("contacts://recent")
async def get_recent_contacts() -> str:
    """–°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."""
    try:
        if api is None:
            return "‚ùå API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
        contacts = await api.get_contacts(limit=10)
        
        if not contacts:
            return "üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        result = f"üë• **–ù–µ–¥–∞–≤–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã** ({len(contacts)} —à—Ç.)\n\n"
        
        for i, contact in enumerate(contacts, 1):
            result += f"{i}. **{contact.name}** (#{contact.id})\n"
            
            if contact.email:
                result += f"   ‚îî‚îÄ üìß {contact.email}\n"
            if contact.phone:
                result += f"   ‚îî‚îÄ üìû {contact.phone}\n"
            if contact.company:
                result += f"   ‚îî‚îÄ üè¢ {contact.company}\n"
            if contact.position:
                result += f"   ‚îî‚îÄ üíº {contact.position}\n"
            result += "\n"
        
        return result.strip()
        
    except Exception as e:
        logger.error(f"Error getting contacts: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {format_error(e)}"

# ============================================================================
# –ü–†–û–ú–ü–¢–´ (PROMPTS) - –®–∞–±–ª–æ–Ω—ã –¥–ª—è LLM
# ============================================================================

@mcp.prompt()
def analyze_project_status(project_name: str) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö)."""
    return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ "{project_name}" –≤ Planfix:

üîç **–ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê (–ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–•):**
1. –ù–∞–π–¥–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–∏—Å–∫
2. –ü–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—É—Å—ã –∏ —Å—Ä–æ–∫–∏ –∑–∞–¥–∞—á
4. –û—Ü–µ–Ω–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
5. –í—ã—è–≤–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

üìä **–î–û–°–¢–£–ü–ù–´–ï –î–ê–ù–ù–´–ï:**
‚Ä¢ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
‚Ä¢ –î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞—á–∞–º
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏

‚ö†Ô∏è **–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:**
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

üìã **–†–ï–ó–£–õ–¨–¢–ê–¢:**
–ü–æ–¥–≥–æ—Ç–æ–≤—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É"""

@mcp.prompt()
def create_weekly_report(week_start: str) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
    week_end = (datetime.strptime(week_start, "%Y-%m-%d") + timedelta(days=6)).strftime("%Y-%m-%d")
    
    return f"""–°–æ–∑–¥–∞–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ {week_start} - {week_end}:

üìä **–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ï–î–ï–õ–ò:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤ —Å—Ä–æ–∫
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –û–±—â–µ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

üéØ **–î–û–°–¢–ò–ñ–ï–ù–ò–Ø:**
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã/—ç—Ç–∞–ø—ã
‚Ä¢ –†–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è

‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–´ –ò –†–ò–°–ö–ò:**
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã
‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏  
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ—Å—É—Ä—Å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

üìà **–¢–†–ï–ù–î–´ –ò –ê–ù–ê–õ–ò–ó:**
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ

üìã **–ü–õ–ê–ù–´ –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ:**
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä—ã"""

@mcp.prompt()
def analyze_sprint_readiness(sprint_duration: int = 14) -> str:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ø—Ä–∏–Ω—Ç—É (—Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö)."""
    return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ø—Ä–∏–Ω—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {sprint_duration} –¥–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Planfix:

üîç **–ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:**
1. –ü–æ–ª—É—á–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∫–æ–º–∞–Ω–¥—ã
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∑–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
3. –û—Ü–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
4. –ò–∑—É—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

üìä **–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ

‚ö†Ô∏è **–†–ò–°–ö–ò –ò –ü–†–ï–ü–Ø–¢–°–¢–í–ò–Ø:**
‚Ä¢ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –ú–Ω–æ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ó–∞–¥–∞—á–∏ –±–µ–∑ —á–µ—Ç–∫–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
‚Ä¢ –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏

üìã **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–≥–æ—Ç–æ–≤—å:
‚Ä¢ –û—Ü–µ–Ω–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∫ —Å–ø—Ä–∏–Ω—Ç—É
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á

üí° **–í–ê–ñ–ù–û:** –≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–∞–Ω–Ω—ã—Ö Planfix. 
–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Planfix."""

# ============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ============================================================================

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    print(sys.argv)
    if len(sys.argv) > 1:
        config.planfix_account = sys.argv[1]
    if len(sys.argv) > 2:
        config.planfix_api_key = sys.argv[2]
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Planfix MCP Server...")
        mcp.run(transport="stdio")
    except KeyboardInterrupt:
        logger.info("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
