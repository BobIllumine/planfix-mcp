#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Planfix MCP Server.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Planfix API
—á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä.
"""

import asyncio
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.planfix_api import PlanfixAPI


async def basic_task_operations():
    """–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏."""
    print("=== –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò ===\n")
    
    api = PlanfixAPI()
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        task = await api.create_task(
            name="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç",
            description="–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ Q4 2024 –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
            priority="HIGH",
            deadline=(datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ ID {task.id}: {task.name}")
        
        # 2. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á
        print("\n2. –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
        tasks = await api.search_tasks(status="active")
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(tasks)}")
        
        for i, task in enumerate(tasks[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   {i}. {task.name} (#{task.id}) - {task.status}")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
        if tasks:
            print(f"\n3. –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ #{tasks[0].id}...")
            task_details = await api.get_task(tasks[0].id)
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task_details.name}")
            print(f"   üîÑ –°—Ç–∞—Ç—É—Å: {task_details.status}")
            print(f"   üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task_details.assignee or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
            print(f"   üéØ –ü—Ä–æ–µ–∫—Ç: {task_details.project or '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}")
        
        # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        if tasks:
            print(f"\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #{tasks[0].id}...")
            success = await api.update_task_status(
                tasks[0].id, 
                "IN_WORK", 
                "–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π"
            )
            if success:
                print("   ‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if tasks:
            print(f"\n5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ #{tasks[0].id}...")
            success = await api.add_task_comment(
                tasks[0].id,
                "–°–æ–±—Ä–∞–ª –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ –∞–Ω–∞–ª–∏–∑—É"
            )
            if success:
                print("   ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def project_management_example():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏."""
    print("\n\n=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===\n")
    
    api = PlanfixAPI()
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
        project = await api.create_project(
            name="–ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            description="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏"
        )
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç ID {project.id}: {project.name}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        print("\n2. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects = await api.get_projects()
        print(f"   üéØ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
        
        for i, project in enumerate(projects[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {project.name} (#{project.id})")
            print(f"      ‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {project.status or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      ‚îî‚îÄ –ó–∞–¥–∞—á: {project.task_count}")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
        if projects:
            project_id = projects[0].id
            print(f"\n3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ #{project_id}...")
            
            # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            tasks_to_create = [
                {
                    "name": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
                    "description": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é",
                    "priority": "HIGH"
                },
                {
                    "name": "–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    "description": "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    "priority": "NORMAL"
                },
                {
                    "name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP",
                    "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç",
                    "priority": "HIGH"
                }
            ]
            
            for task_info in tasks_to_create:
                task = await api.create_task(
                    name=task_info["name"],
                    description=task_info["description"],
                    project_id=project_id,
                    priority=task_info["priority"]
                )
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task.name}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def contact_management_example():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."""
    print("\n\n=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê–ú–ò ===\n")
    
    api = PlanfixAPI()
    
    try:
        # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        print("1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        contacts_to_add = [
            {
                "name": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
                "email": "anna.smirnova@company.ru",
                "phone": "+7-495-123-45-67",
                "company": "–û–û–û ¬´–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è¬ª",
                "position": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤"
            },
            {
                "name": "–ü–µ—Ç—Ä –ö–æ–∑–ª–æ–≤",
                "email": "p.kozlov@techstart.com",
                "phone": "+7-812-987-65-43",
                "company": "–¢–µ—Ö–°—Ç–∞—Ä—Ç",
                "position": "CTO"
            },
            {
                "name": "–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞",
                "email": "elena.morozova@consulting.ru",
                "phone": "+7-903-555-66-77",
                "company": "–ë–∏–∑–Ω–µ—Å–ö–æ–Ω—Å–∞–ª—Ç",
                "position": "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫"
            }
        ]
        
        for contact_info in contacts_to_add:
            contact = await api.add_contact(
                name=contact_info["name"],
                email=contact_info["email"],
                phone=contact_info["phone"],
                company=contact_info["company"],
                position=contact_info["position"]
            )
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact.name} ({contact.company})")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        print("\n2. –ù–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã...")
        contacts = await api.get_contacts(limit=10)
        print(f"   üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
        
        for i, contact in enumerate(contacts, 1):
            print(f"   {i}. {contact.name}")
            if contact.email:
                print(f"      ‚îî‚îÄ üìß {contact.email}")
            if contact.company:
                print(f"      ‚îî‚îÄ üè¢ {contact.company}")
            if contact.position:
                print(f"      ‚îî‚îÄ üíº {contact.position}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def analytics_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
    print("\n\n=== –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–Å–¢–´ ===\n")
    
    api = PlanfixAPI()
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        date_from = start_date.strftime("%Y-%m-%d")
        date_to = end_date.strftime("%Y-%m-%d")
        
        # 1. –û—Ç—á—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏...")
        time_report = await api.get_analytics_report(
            report_type="time",
            date_from=date_from,
            date_to=date_to,
            group_by="user"
        )
        
        print(f"   üìä –û—Ç—á—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {time_report['period']}")
        print(f"   üìà –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {time_report['group_by']}")
        
        if time_report.get('summary'):
            print("   üí° –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
            for key, value in time_report['summary'].items():
                print(f"      ‚îî‚îÄ {key}: {value}")
        
        if time_report.get('data'):
            print("   üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            for i, item in enumerate(time_report['data'][:5], 1):
                print(f"      {i}. {item.get('name', 'N/A')}: {item.get('value', 'N/A')}")
        
        # 2. –û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º
        print(f"\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–¥–∞—á–∞–º...")
        tasks_report = await api.get_analytics_report(
            report_type="tasks",
            date_from=date_from,
            date_to=date_to,
            group_by="project"
        )
        
        print(f"   üìä –û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ {tasks_report['period']}")
        
        if tasks_report.get('data'):
            print("   üìã –ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º:")
            for i, item in enumerate(tasks_report['data'][:5], 1):
                print(f"      {i}. {item.get('name', 'N/A')}: {item.get('value', 'N/A')}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


async def search_and_filter_example():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
    print("\n\n=== –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ===\n")
    
    api = PlanfixAPI()
    
    try:
        # 1. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print("1. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
        search_queries = ["–æ—Ç—á—ë—Ç", "–∞–Ω–∞–ª–∏–∑", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"]
        
        for query in search_queries:
            tasks = await api.search_tasks(query=query, status="all")
            print(f"   üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
            
            for task in tasks[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"      ‚îî‚îÄ {task.name} (#{task.id})")
        
        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        print("\n2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É...")
        statuses = ["active", "completed"]
        
        for status in statuses:
            tasks = await api.search_tasks(status=status)
            print(f"   üìä –ó–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {len(tasks)}")
        
        # 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        print("\n3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫...")
        projects = await api.get_projects()
        
        if projects:
            project_id = projects[0].id
            tasks = await api.search_tasks(
                query="",
                project_id=project_id,
                status="active"
            )
            print(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ #{project_id}: {len(tasks)}")
            
            for task in tasks[:3]:
                print(f"      ‚îî‚îÄ {task.name}")
                print(f"         –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task.assignee or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}")
                print(f"         –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority or '–û–±—ã—á–Ω—ã–π'}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
    print("üöÄ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø PLANFIX MCP SERVER\n")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["PLANFIX_ACCOUNT", "PLANFIX_API_KEY", "PLANFIX_USER_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        api = PlanfixAPI()
        connection_ok = await api.test_connection()
        
        if not connection_ok:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Planfix API —É—Å–ø–µ—à–Ω–æ!\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        await basic_task_operations()
        await project_management_example()
        await contact_management_example()
        await analytics_example()
        await search_and_filter_example()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –ü–†–ò–ú–ï–†–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüí° –°–æ–≤–µ—Ç—ã:")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Å–≤–æ–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤")
        print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        print("   ‚Ä¢ –ò–∑—É—á–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Planfix API –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(main())