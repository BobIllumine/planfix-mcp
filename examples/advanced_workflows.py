#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Planfix MCP Server.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Planfix API.
"""

import asyncio
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.planfix_api import PlanfixAPI, Task, Project, Contact


class PlanfixWorkflowAutomator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Planfix."""
    
    def __init__(self):
        self.api = PlanfixAPI()
    
    async def create_project_with_tasks(
        self, 
        project_name: str, 
        project_description: str,
        task_templates: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –Ω–∞–±–æ—Ä–æ–º –∑–∞–¥–∞—á –ø–æ —à–∞–±–ª–æ–Ω—É."""
        
        print(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
        
        # 1. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        project = await self.api.create_project(
            name=project_name,
            description=project_description
        )
        
        print(f"   ‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ID {project.id}")
        
        # 2. –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        created_tasks = []
        
        for i, task_template in enumerate(task_templates, 1):
            print(f"   üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {i}/{len(task_templates)}: {task_template['name']}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            deadline = None
            if task_template.get('days_from_start'):
                deadline = (datetime.now() + timedelta(days=task_template['days_from_start'])).strftime("%Y-%m-%d")
            
            task = await self.api.create_task(
                name=task_template['name'],
                description=task_template.get('description', ''),
                project_id=project.id,
                priority=task_template.get('priority', 'NORMAL'),
                deadline=deadline
            )
            
            created_tasks.append(task)
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(created_tasks)}")
        
        return {
            'project': project,
            'tasks': created_tasks,
            'summary': f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —Å–æ–∑–¥–∞–Ω —Å {len(created_tasks)} –∑–∞–¥–∞—á–∞–º–∏"
        }
    
    async def setup_marketing_campaign(self, campaign_name: str) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–¥–∞—á."""
        
        print(f"üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏: {campaign_name}")
        
        # –®–∞–±–ª–æ–Ω –∑–∞–¥–∞—á –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        marketing_tasks = [
            {
                'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
                'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                'priority': 'HIGH',
                'days_from_start': 3
            },
            {
                'name': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
                'description': '–°–æ–∑–¥–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Å—Å–µ–¥–∂–∏',
                'priority': 'HIGH',
                'days_from_start': 7
            },
            {
                'name': '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
                'description': '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–Ω–Ω–µ—Ä—ã, —Ç–µ–∫—Å—Ç—ã, –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                'priority': 'NORMAL',
                'days_from_start': 14
            },
            {
                'name': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π',
                'description': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ –≤ Google Ads, –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç, —Å–æ—Ü—Å–µ—Ç—è—Ö',
                'priority': 'HIGH',
                'days_from_start': 18
            },
            {
                'name': '–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏',
                'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
                'priority': 'CRITICAL',
                'days_from_start': 21
            },
            {
                'name': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
                'description': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
                'priority': 'HIGH',
                'days_from_start': 22
            },
            {
                'name': '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–∞–º–ø–∞–Ω–∏–∏',
                'priority': 'NORMAL',
                'days_from_start': 35
            }
        ]
        
        return await self.create_project_with_tasks(
            project_name=f"–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è: {campaign_name}",
            project_description=f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ '{campaign_name}' –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            task_templates=marketing_tasks
        )
    
    async def setup_product_development(self, product_name: str) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."""
        
        print(f"üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}")
        
        # –®–∞–±–ª–æ–Ω –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        development_tasks = [
            {
                'name': '–°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π',
                'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                'priority': 'CRITICAL',
                'days_from_start': 5
            },
            {
                'name': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description': '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                'priority': 'HIGH',
                'days_from_start': 10
            },
            {
                'name': 'UI/UX –¥–∏–∑–∞–π–Ω',
                'description': '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã',
                'priority': 'HIGH',
                'days_from_start': 15
            },
            {
                'name': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP',
                'description': '–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
                'priority': 'CRITICAL',
                'days_from_start': 45
            },
            {
                'name': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MVP',
                'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'priority': 'HIGH',
                'days_from_start': 50
            },
            {
                'name': '–ê–ª—å—Ñ–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π',
                'priority': 'HIGH',
                'days_from_start': 55
            },
            {
                'name': '–ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
                'priority': 'HIGH',
                'days_from_start': 65
            },
            {
                'name': '–î–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ feedback',
                'description': '–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–æ–≤',
                'priority': 'NORMAL',
                'days_from_start': 75
            },
            {
                'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–ª–∏–∑—É',
                'description': '–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞',
                'priority': 'CRITICAL',
                'days_from_start': 85
            },
            {
                'name': '–†–µ–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞',
                'description': '–í—ã–ø—É—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω',
                'priority': 'CRITICAL',
                'days_from_start': 90
            }
        ]
        
        return await self.create_project_with_tasks(
            project_name=f"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}",
            project_description=f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_name}' –æ—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–ª–∏–∑–∞",
            task_templates=development_tasks
        )
    
    async def client_onboarding_workflow(self, client_name: str, client_email: str) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞."""
        
        print(f"üëã –ó–∞–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞: {client_name}")
        
        # 1. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
        contact = await self.api.add_contact(
            name=client_name,
            email=client_email,
            company=f"–ö–æ–º–ø–∞–Ω–∏—è {client_name}",
            position="–ö–ª–∏–µ–Ω—Ç"
        )
        
        print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {contact.name}")
        
        # 2. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        onboarding_tasks = [
            {
                'name': '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É',
                'description': f'–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–≤–æ–¥–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —Å {client_name} –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞',
                'priority': 'HIGH',
                'days_from_start': 1
            },
            {
                'name': '–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞',
                'description': '–î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞',
                'priority': 'HIGH',
                'days_from_start': 2
            },
            {
                'name': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                'description': '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ö–ü –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞',
                'priority': 'HIGH',
                'days_from_start': 5
            },
            {
                'name': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è',
                'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è',
                'priority': 'HIGH',
                'days_from_start': 7
            },
            {
                'name': '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞',
                'description': '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä',
                'priority': 'CRITICAL',
                'days_from_start': 10
            },
            {
                'name': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
                'description': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø—ã',
                'priority': 'HIGH',
                'days_from_start': 12
            },
            {
                'name': '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∞',
                'description': '–ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞',
                'priority': 'NORMAL',
                'days_from_start': 15
            },
            {
                'name': '–ó–∞–ø—É—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞',
                'description': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
                'priority': 'HIGH',
                'days_from_start': 17
            }
        ]
        
        project_result = await self.create_project_with_tasks(
            project_name=f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞: {client_name}",
            project_description=f"–ü—Ä–æ—Ü–µ—Å—Å –≤–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ {client_name} ({client_email})",
            task_templates=onboarding_tasks
        )
        
        return {
            'contact': contact,
            'project': project_result['project'],
            'tasks': project_result['tasks'],
            'summary': f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å {len(project_result['tasks'])} –∑–∞–¥–∞—á–∞–º–∏"
        }
    
    async def weekly_reporting_automation(self) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏."""
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        date_from = start_date.strftime("%Y-%m-%d")
        date_to = end_date.strftime("%Y-%m-%d")
        
        report_data = {}
        
        try:
            # 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–∞–º
            all_tasks = await self.api.search_tasks(status="all")
            active_tasks = await self.api.search_tasks(status="active")
            completed_tasks = await self.api.search_tasks(status="completed")
            
            report_data['tasks'] = {
                'total': len(all_tasks),
                'active': len(active_tasks),
                'completed': len(completed_tasks),
                'completion_rate': round((len(completed_tasks) / len(all_tasks)) * 100, 1) if all_tasks else 0
            }
            
            # 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            projects = await self.api.get_projects()
            active_projects = [p for p in projects if p.status != "COMPLETED"]
            
            report_data['projects'] = {
                'total': len(projects),
                'active': len(active_projects)
            }
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            try:
                time_report = await self.api.get_analytics_report(
                    report_type="time",
                    date_from=date_from,
                    date_to=date_to,
                    group_by="user"
                )
                report_data['time_analytics'] = time_report
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                report_data['time_analytics'] = None
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
            report_summary = self._format_weekly_report(report_data, date_from, date_to)
            
            print("   ‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            return {
                'period': f"{date_from} - {date_to}",
                'data': report_data,
                'summary': report_summary
            }
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            return {'error': str(e)}
    
    def _format_weekly_report(self, data: Dict[str, Any], date_from: str, date_to: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞."""
        
        report = f"""
üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢
–ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}

üìã –ó–ê–î–ê–ß–ò:
   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {data['tasks']['total']}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {data['tasks']['active']}
   ‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ: {data['tasks']['completed']}
   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {data['tasks']['completion_rate']}%

üéØ –ü–†–û–ï–ö–¢–´:
   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {data['projects']['total']}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {data['projects']['active']}
"""
        
        if data.get('time_analytics'):
            report += "\n‚è±Ô∏è –í–†–ï–ú–Ø:\n"
            if data['time_analytics'].get('summary'):
                for key, value in data['time_analytics']['summary'].items():
                    report += f"   ‚Ä¢ {key}: {value}\n"
        
        return report.strip()
    
    async def handle_overdue_tasks(self) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
        
        print("‚ö†Ô∏è  –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_tasks = await self.api.search_tasks(status="active")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        today = datetime.now().strftime("%Y-%m-%d")
        overdue_tasks = []
        
        for task in active_tasks:
            if task.deadline and task.deadline < today:
                overdue_tasks.append(task)
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(overdue_tasks)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        processed_tasks = []
        
        for task in overdue_tasks[:5]:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
                await self.api.add_task_comment(
                    task.id,
                    f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞! –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ã–ª: {task.deadline}"
                )
                
                processed_tasks.append({
                    'task': task,
                    'action': 'comment_added',
                    'message': '–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ'
                })
                
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #{task.id}: {task.name}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ #{task.id}: {e}")
        
        return {
            'total_overdue': len(overdue_tasks),
            'processed': len(processed_tasks),
            'tasks': processed_tasks
        }


async def demo_marketing_campaign():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏."""
    automator = PlanfixWorkflowAutomator()
    
    result = await automator.setup_marketing_campaign("–õ–µ—Ç–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ 2024")
    print(f"\n‚úÖ {result['summary']}")
    
    return result


async def demo_product_development():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    automator = PlanfixWorkflowAutomator()
    
    result = await automator.setup_product_development("CRM —Å–∏—Å—Ç–µ–º–∞ v2.0")
    print(f"\n‚úÖ {result['summary']}")
    
    return result


async def demo_client_onboarding():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–∞."""
    automator = PlanfixWorkflowAutomator()
    
    result = await automator.client_onboarding_workflow(
        client_name="–¢–µ—Ö–Ω–æ–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏",
        client_email="info@technoinnovations.ru"
    )
    print(f"\n‚úÖ {result['summary']}")
    
    return result


async def demo_reporting():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏."""
    automator = PlanfixWorkflowAutomator()
    
    result = await automator.weekly_reporting_automation()
    
    if 'error' not in result:
        print(f"\nüìä –û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {result['period']}:")
        print(result['summary'])
    
    return result


async def demo_overdue_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
    automator = PlanfixWorkflowAutomator()
    
    result = await automator.handle_overdue_tasks()
    print(f"\n‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:")
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {result['total_overdue']}")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['processed']}")
    
    return result


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
    print("üöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ï –°–¶–ï–ù–ê–†–ò–ò PLANFIX MCP SERVER\n")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["PLANFIX_ACCOUNT", "PLANFIX_API_KEY", "PLANFIX_USER_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª.")
        return
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        api = PlanfixAPI()
        connection_ok = await api.test_connection()
        
        if not connection_ok:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Planfix API —É—Å–ø–µ—à–Ω–æ!\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        print("üì¢ 1. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –ö–ê–ú–ü–ê–ù–ò–Ø")
        await demo_marketing_campaign()
        
        print("\n" + "‚îÄ" * 50)
        print("\nüöÄ 2. –†–ê–ó–†–ê–ë–û–¢–ö–ê –ü–†–û–î–£–ö–¢–ê")
        await demo_product_development()
        
        print("\n" + "‚îÄ" * 50)
        print("\nüëã 3. –û–ù–ë–û–†–î–ò–ù–ì –ö–õ–ò–ï–ù–¢–ê")
        await demo_client_onboarding()
        
        print("\n" + "‚îÄ" * 50)
        print("\nüìä 4. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ß–Å–¢–ù–û–°–¢–¨")
        await demo_reporting()
        
        print("\n" + "‚îÄ" * 50)
        print("\n‚ö†Ô∏è  5. –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –ó–ê–î–ê–ß")
        await demo_overdue_handling()
        
        print("\n" + "=" * 70)
        print("üéâ –í–°–ï –ü–†–û–î–í–ò–ù–£–¢–´–ï –°–¶–ï–ù–ê–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´!")
        print("\nüí° –≠—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å:")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("   ‚Ä¢ –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ–º–ø–∞–Ω–∏–∏")
        print("   ‚Ä¢ –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
        print("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(main())